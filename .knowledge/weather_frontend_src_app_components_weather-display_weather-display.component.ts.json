{"is_source_file": true, "format": "TypeScript", "description": "This file defines an Angular component 'WeatherDisplayComponent' which manages displaying weather data. It handles input changes, fetches current weather and forecast data via a WeatherService, supports geolocation-based weather fetching, and maintains internal state signals and references to child components.", "external_files": ["../../services/weather.service", "../weather-sections/current-weather/current-weather.component", "../weather-sections/forecast-list/forecast-list.component", "./weather-display.component.html", "./weather-display.component.scss"], "external_methods": ["WeatherService.getCurrentByCoords", "WeatherService.getForecastByCoords", "WeatherService.searchCity", "WeatherService.getForecastByCity"], "published": [], "classes": [{"name": "WeatherDisplayComponent", "description": "An Angular component responsible for displaying weather information for a specified city or current location, updating dynamically based on input changes and user interactions."}], "methods": [{"name": "ngOnChanges", "description": "Lifecycle hook triggered when input properties change; fetches weather data if the 'city' input is updated."}, {"name": "useGeolocation", "description": "Requests user's browser geolocation to fetch and display weather data for current location."}, {"name": "fetchByCity", "description": "Fetches current weather and forecast data based on the provided city name."}], "calls": ["navigator.geolocation.getCurrentPosition", "this.weather.getCurrentByCoords", "this.weather.getForecastByCoords", "this.weather.searchCity", "this.weather.getForecastByCity"], "search-terms": ["Angular WeatherDisplayComponent", "geolocation weather fetch", "weather signals", "city input weather fetch", "standalone Angular component"], "state": 2, "file_id": 62, "knowledge_revision": 185, "git_revision": "", "ctags": [{"_type": "tag", "name": "WeatherDisplayComponent", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^export class WeatherDisplayComponent implements OnChanges {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const c = (this.city || '').trim();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "city", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^  @Input() city: string | null = null;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherDisplayComponent", "scopeKind": "class"}, {"_type": "tag", "name": "cur", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const [cur, fc] = await Promise.all([$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "fc", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const [cur, fc] = await Promise.all([$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "lat", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const lat = position.coords.latitude;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "loading", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^  loading = signal(false);$/", "language": "TypeScript", "kind": "property", "scope": "WeatherDisplayComponent", "scopeKind": "class"}, {"_type": "tag", "name": "lon", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const lon = position.coords.longitude;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "position", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/components/weather-display/weather-display.component.ts", "pattern": "/^      const position = await new Promise<GeolocationPosition>((resolve, reject) => {$/", "language": "TypeScript", "kind": "constant"}], "hash": "0ff4207a00a3b3215cb96782c819dcbe", "format-version": 4, "code-base-name": "weather_frontend", "filename": "weather_frontend/src/app/components/weather-display/weather-display.component.ts", "fields": [{"name": "@Input() city: string | null = null;", "scope": "WeatherDisplayComponent", "scopeKind": "class", "description": "unavailable"}, {"name": "loading = signal(false);", "scope": "WeatherDisplayComponent", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"185": ""}]}