{"is_source_file": true, "format": "TypeScript", "description": "This file defines an Angular service named WeatherService, which provides methods to fetch current weather and forecast data from a backend API, process and map responses into a unified format, and include fallback mock data. It also exports interfaces for weather results and forecast days.", "external_files": ["@angular/core", "@angular/common/http", "rxjs"], "external_methods": ["firstValueFrom"], "published": ["WeatherResult", "ForecastDay", "WeatherService"], "classes": [{"name": "WeatherService", "description": "An Angular injectable service that handles fetching and processing weather data from external APIs, including fallback mock data."}], "methods": [{"name": "private mapCurrent(res: any, fallbackCity?: string): WeatherResult { mapCurrent", "description": "Maps an API response object to the WeatherResult interface, with optional fallback for city name.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "private mapForecast(res: any): ForecastDay[] { mapForecast", "description": "Transforms API forecast responses into an array of ForecastDay objects, handling different response formats.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "async searchCity(city: string): Promise<WeatherResult | null> { searchCity", "description": "Fetches current weather data for a given city, with fallback mock data on failure.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "async getForecastByCity(city: string): Promise<ForecastDay[]> { getForecastByCity", "description": "Retrieves weather forecast for a specified city, returning a list of ForecastDay objects, with fallback mock data on failure.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "async getCurrentByCoords(lat: number, lon: number): Promise<WeatherResult> { getCurrentByCoords", "description": "Fetches current weather based on latitude and longitude, with fallback mock data.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "async getForecastByCoords(lat: number, lon: number): Promise<ForecastDay[]> { getForecastByCoords", "description": "Fetches forecast data based on coordinates, with fallback mock data.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "private mockForecast(): ForecastDay[] { mockForecast", "description": "Generates a mock 5-day forecast array with sample data.", "scope": "WeatherService", "scopeKind": "class"}, {"name": "constructor(private http: HttpClient) {} constructor", "scope": "WeatherService", "scopeKind": "class", "description": "unavailable"}], "calls": ["this.http.get"], "search-terms": ["WeatherService", "mapCurrent", "mapForecast", "searchCity", "getForecastByCity", "getCurrentByCoords", "getForecastByCoords", "@angular/core", "@angular/common/http", "rxjs", "firstValueFrom"], "state": 2, "file_id": 48, "knowledge_revision": 209, "git_revision": "9dbe8b47b3dcf08adf1d7e677d6e926885531973", "revision_history": [{"126": ""}, {"209": "9dbe8b47b3dcf08adf1d7e677d6e926885531973"}], "ctags": [{"_type": "tag", "name": "ForecastDay", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^export interface ForecastDay {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "WeatherResult", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^export interface WeatherResult {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "WeatherService", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^export class WeatherService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^    const base = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "city", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  city: string;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "date", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const date = new Date((item.dt || item.dt_txt || Date.now()) * (item.dt ? 1000 : 1));$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "day", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const day = base[(today + i + 1) % 7];$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "day", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const day = date.toLocaleDateString(undefined, { weekday: 'short' });$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "day", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  day: string;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "days", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^    const days: ForecastDay[] = [];$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "description", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const description = icon === 'sun' ? 'clear sky' : icon === 'cloud' ? 'cloudy' : 'light ra/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "description", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const description = item?.weather?.[0]?.description || 'N\\/A';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "description", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  description: string;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "description", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  description: string;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "feels_like", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  feels_like: number;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "getCurrentByCoords", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  async getCurrentByCoords(lat: number, lon: number): Promise<WeatherResult> {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "getForecastByCity", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  async getForecastByCity(city: string): Promise<ForecastDay[]> {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "getForecastByCoords", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  async getForecastByCoords(lat: number, lon: number): Promise<ForecastDay[]> {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "property", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "humidity", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const humidity = Math.round(item?.humidity ?? item?.main?.humidity ?? 0);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "humidity", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  humidity: number;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "humidity", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  humidity: number;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "icon", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const icon = i % 3 === 0 ? 'sun' : i % 3 === 1 ? 'cloud' : 'rain';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "icon", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const icon = item?.weather?.[0]?.main || undefined;$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "icon", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  icon?: string;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "icon", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  icon?: string;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "item", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^    for (const item of source.slice(0, 7)) {$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "mapCurrent", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  private mapCurrent(res: any, fallbackCity?: string): WeatherResult {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "mapForecast", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  private mapForecast(res: any): ForecastDay[] {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "max", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const max = 22 + (i % 3);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "max", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const max = Math.round(item?.temp?.max ?? item?.main?.temp_max ?? item?.temp_max ?? 0);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "max", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  max: number;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "min", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const min = Math.round(item?.temp?.min ?? item?.main?.temp_min ?? item?.temp_min ?? 0);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "min", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const min = max - 6;$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "min", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  min: number;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "mockForecast", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  private mockForecast(): ForecastDay[] {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const params = new HttpParams().set('lat', lat).set('lon', lon);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getCurrentByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const params = new HttpParams().set('lat', lat).set('lon', lon);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const params = new HttpParams().set('q', city);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCity", "scopeKind": "method"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const params = new HttpParams().set('q', city);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.searchCity", "scopeKind": "method"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const res: any = await firstValueFrom(this.http.get(url, { params }));$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getCurrentByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const res: any = await firstValueFrom(this.http.get(url, { params }));$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCity", "scopeKind": "method"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const res: any = await firstValueFrom(this.http.get(url, { params }));$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const res: any = await firstValueFrom(this.http.get(url, { params }));$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.searchCity", "scopeKind": "method"}, {"_type": "tag", "name": "searchCity", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  async searchCity(city: string): Promise<WeatherResult | null> {$/", "language": "TypeScript", "kind": "method", "scope": "WeatherService", "scopeKind": "class"}, {"_type": "tag", "name": "source", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^    const source = Array.isArray(res?.daily) ? res.daily : Array.isArray(res?.list) ? res.list :/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "temp", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  temp: number;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}, {"_type": "tag", "name": "today", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^    const today = new Date().getDay();$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mockForecast", "scopeKind": "method"}, {"_type": "tag", "name": "url", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const url = '\\/api\\/weather';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.searchCity", "scopeKind": "method"}, {"_type": "tag", "name": "url", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const url = '\\/api\\/weather\\/current';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getCurrentByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "url", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const url = '\\/api\\/weather\\/forecast';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCity", "scopeKind": "method"}, {"_type": "tag", "name": "url", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const url = '\\/api\\/weather\\/forecast';$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.getForecastByCoords", "scopeKind": "method"}, {"_type": "tag", "name": "wind", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^      const wind = Math.round(item?.wind_speed ?? item?.wind?.speed ?? 0);$/", "language": "TypeScript", "kind": "constant", "scope": "WeatherService.mapForecast", "scopeKind": "method"}, {"_type": "tag", "name": "wind", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  wind: number;$/", "language": "TypeScript", "kind": "property", "scope": "ForecastDay", "scopeKind": "interface"}, {"_type": "tag", "name": "wind", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/app/services/weather.service.ts", "pattern": "/^  wind: number;$/", "language": "TypeScript", "kind": "property", "scope": "WeatherResult", "scopeKind": "interface"}], "hash": "486e66df8467ded1d5bfc5856362e20f", "format-version": 4, "code-base-name": "weather_frontend", "filename": "weather_frontend/src/app/services/weather.service.ts", "fields": [{"name": "export interface ForecastDay {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "export interface WeatherResult {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "city: string;", "scope": "WeatherResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "day: string;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "description: string;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "feels_like: number;", "scope": "WeatherResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "constructor(private http: HttpClient) {}", "scope": "WeatherService", "scopeKind": "class", "description": "unavailable"}, {"name": "humidity: number;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "icon?: string;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "max: number;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "min: number;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}, {"name": "temp: number;", "scope": "WeatherResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "wind: number;", "scope": "ForecastDay", "scopeKind": "interface", "description": "unavailable"}]}