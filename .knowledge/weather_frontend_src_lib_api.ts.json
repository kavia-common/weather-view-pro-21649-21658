{"is_source_file": true, "format": "TypeScript", "description": "This file defines API client utilities for fetching weather data, locations, and managing saved locations in the WeatherView Pro frontend. It includes type definitions for weather data, shared functions for API calls, and internal helpers for handling fetch requests.", "external_files": ["fetch"], "external_methods": ["fetch"], "published": ["ForecastPoint", "CurrentWeather", "WeatherResponse", "LocationItem", "NewLocationRequest", "fetchWeather", "fetchLocations", "addLocation", "removeLocation"], "classes": [], "methods": [{"name": "async function jsonFetch<T>(input: RequestInfo | URL, init?: RequestInit): Promise<T> { jsonFetch", "description": "Internal helper to perform fetch requests with JSON response handling and error propagation.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchWeather(q: string, days = 5): Promise<WeatherResponse> { fetchWeather", "description": "Fetch weather data for a specified location query and forecast days.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchLocations(): Promise<LocationItem[]> { fetchLocations", "description": "Retrieve the list of saved weather locations.", "scope": "", "scopeKind": ""}, {"name": "export async function addLocation(body: NewLocationRequest): Promise<LocationItem> { addLocation", "description": "Add a new location to the saved list.", "scope": "", "scopeKind": ""}, {"name": "export async function removeLocation(id: string): Promise<{ success: boolean }> { removeLocation", "description": "Remove a saved location by its ID.", "scope": "", "scopeKind": ""}], "calls": ["fetch", "jsonFetch"], "search-terms": ["api client", "fetchWeather", "LocationItem", "fetchLocations", "addLocation", "removeLocation", "WeatherResponse", "TypeScript API client"], "state": 2, "file_id": 23, "knowledge_revision": 61, "git_revision": "", "ctags": [{"_type": "tag", "name": "CurrentWeather", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type CurrentWeather = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "ForecastPoint", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type ForecastPoint = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "LocationItem", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type LocationItem = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "NewLocationRequest", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type NewLocationRequest = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "WeatherResponse", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type WeatherResponse = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "addLocation", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function addLocation(body: NewLocationRequest): Promise<LocationItem> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "data", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^      const data = (await res.json()) as { message?: string; error?: string };$/", "language": "TypeScript", "kind": "constant", "scope": "jsonFetch", "scopeKind": "function"}, {"_type": "tag", "name": "fetchLocations", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function fetchLocations(): Promise<LocationItem[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchWeather", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function fetchWeather(q: string, days = 5): Promise<WeatherResponse> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "jsonFetch", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^async function jsonFetch<T>(input: RequestInfo | URL, init?: RequestInit): Promise<T> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const params = new URLSearchParams({ location: q, days: String(days) });$/", "language": "TypeScript", "kind": "constant", "scope": "fetchWeather", "scopeKind": "function"}, {"_type": "tag", "name": "removeLocation", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function removeLocation(id: string): Promise<{ success: boolean }> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(input, {$/", "language": "TypeScript", "kind": "constant", "scope": "jsonFetch", "scopeKind": "function"}], "hash": "5ddf0e4503619c90dadd931fa8c2d0ca", "format-version": 4, "code-base-name": "weather_frontend", "filename": "weather_frontend/src/lib/api.ts", "revision_history": [{"61": ""}]}