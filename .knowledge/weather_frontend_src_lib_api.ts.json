{"is_source_file": true, "format": "TypeScript", "description": "This file defines a set of typed API client functions for a weather frontend application, including functions to fetch weather data, manage user locations, and retrieve user profiles. It also exports several type definitions used throughout the application.", "external_files": ["/api/weather", "/api/locations", "/api/users/me"], "external_methods": ["fetch"], "published": ["fetchWeather", "fetchLocations", "addLocation", "removeLocation", "fetchCurrentUser"], "classes": [], "methods": [{"name": "async function handle<T>(res: Response): Promise<T> { handle", "description": "A generic function to handle fetch responses, parsing JSON or throwing errors for non-OK responses.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchWeather(location: string, days = 5): Promise<WeatherResponse> { fetchWeather", "description": "Fetches weather data for a specified location and number of days, returning a structured WeatherResponse object.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchLocations(): Promise<LocationItem[]> { fetchLocations", "description": "Retrieves the list of saved user locations.", "scope": "", "scopeKind": ""}, {"name": "export async function addLocation(payload: { name: string; coordinates?: Coordinates }): Promise/ addLocation", "description": "Adds a new location with a name and optional coordinates, returning the created LocationItem.", "scope": "", "scopeKind": ""}, {"name": "export async function removeLocation(id: string): Promise<{ success: boolean }> { removeLocation", "description": "Removes a location by its ID, returning a success indicator.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchCurrentUser(): Promise<UserProfile> { fetchCurrentUser", "description": "Retrieves the current user's profile information.", "scope": "", "scopeKind": ""}], "calls": ["fetch", "handle"], "search-terms": ["api.ts", "weather data fetch functions", "LocationItem", "CurrentWeather", "UserProfile", "protected API routes", "fetchWeather", "fetchLocations", "addLocation", "removeLocation", "fetchCurrentUser"], "state": 2, "file_id": 12, "knowledge_revision": 25, "git_revision": "", "ctags": [{"_type": "tag", "name": "Coordinates", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type Coordinates = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "CurrentWeather", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type CurrentWeather = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "ForecastPoint", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type ForecastPoint = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "LocationItem", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type LocationItem = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "UserProfile", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type UserProfile = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "WeatherResponse", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export type WeatherResponse = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "addLocation", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function addLocation(payload: { name: string; coordinates?: Coordinates }): Promise/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^const base = \"\";$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "fetchCurrentUser", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function fetchCurrentUser(): Promise<UserProfile> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchLocations", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function fetchLocations(): Promise<LocationItem[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchWeather", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function fetchWeather(location: string, days = 5): Promise<WeatherResponse> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "handle", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^async function handle<T>(res: Response): Promise<T> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "removeLocation", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^export async function removeLocation(id: string): Promise<{ success: boolean }> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(`\\/api\\/locations\\/${encodeURIComponent(id)}`, { method: \"DELETE\" });$/", "language": "TypeScript", "kind": "constant", "scope": "removeLocation", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(`\\/api\\/locations`, { method: \"GET\" });$/", "language": "TypeScript", "kind": "constant", "scope": "fetchLocations", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(`\\/api\\/locations`, {$/", "language": "TypeScript", "kind": "constant", "scope": "addLocation", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(`\\/api\\/users\\/me`, { method: \"GET\" });$/", "language": "TypeScript", "kind": "constant", "scope": "fetchCurrentUser", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(url.toString(), { method: \"GET\" });$/", "language": "TypeScript", "kind": "constant", "scope": "fetchWeather", "scopeKind": "function"}, {"_type": "tag", "name": "text", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^    const text = await res.text().catch(() => \"\");$/", "language": "TypeScript", "kind": "constant", "scope": "handle", "scopeKind": "function"}, {"_type": "tag", "name": "url", "path": "/home/kavia/workspace/code-generation/weather-view-pro-21649-21658/weather_frontend/src/lib/api.ts", "pattern": "/^  const url = new URL(`${base}\\/api\\/weather`, window.location.origin);$/", "language": "TypeScript", "kind": "constant", "scope": "fetchWeather", "scopeKind": "function"}], "hash": "bbfb3d341eaa59716b511a96721076c2", "format-version": 4, "code-base-name": "weather_frontend", "filename": "weather_frontend/src/lib/api.ts", "revision_history": [{"25": ""}]}